pip install requests

pip install pydantic


Estoy trabajando en un proyecto de Python. El programa consiste en construir un juego usando una librer√≠a de desarrollo
de juegos, usando la librer√≠a Pygame. Simula a un repartidor que debe aceptar y completar pedidos en
una ciudad, gestionando tiempos de entrega, clima, inventario y prioridades.

La informaci√≥n del juego es proporcionada por un API alojado en un link: https://tigerds-api.kindflower-ccaf48b6.eastus.azurecontainerapps.io

El jugador controla a un repartidor en bicicleta que debe moverse por una ciudad
representada como una cuadr√≠cula de calles, edificios y parques. El repartidor se desplaza en bicicleta 
casilla por casilla por las calles de la ciudad. Para
completar un pedido debe ir al punto de recogida (pickup), transportar el paquete en el inventario y entregarlo en el punto de destino.

El rendimiento del repartidor depende de varias variables interconectadas:
Resistencia: se representa con una barra de 0‚Äì100. Baja con el movimiento, sobre todo si lleva mucho peso o si el clima es
adverso. Si llega a 0, el jugador queda exhausto y no puede moverse hasta recuperarse al 30%.

Clima: cambia autom√°ticamente cada 45-60 segundos siguiendo una cadena de Markov. La lluvia, tormentas, viento o calor extremo reducen la velocidad y aumentan el consumo de resistencia. La transici√≥n entre climas es progresiva, para que los cambios se sientan naturales.

Peso del inventario: cada pedido tiene un peso; a mayor peso, menor velocidad y mayor gasto de energ√≠a.

Reputaci√≥n: comienza en 70/100 y sube o baja seg√∫n la puntualidad y las acciones del jugador. Las entregas puntuales
aumentan la reputaci√≥n. Los retrasos o cancelaciones la reducen y con reputaci√≥n mayor o igual al 90% el jugador recibe 
extra an pagos. Finalmente, si baja de 20, el juego termina en derrota.


api = ManejadorAPI()

    # === Weather Example ===
    clima = api.get_weather("TigerCity")
    print("\nüå§Ô∏è --- Weather Info ---")
    print("Ciudad:", clima.city)
    print("Condici√≥n inicial:", clima.initial.condition, "-", clima.initial.intensity)
    print("Condiciones posibles:", clima.conditions)
    print("Transiciones desde 'clear':", clima.transition["clear"])

    # === City Map Example ===
    # First time: fetch from API
    city_map = api.get_map()
    print("\nüó∫Ô∏è --- City Map Info ---")
    print("Ciudad:", city_map.city_name)
    print("Tama√±o:", city_map.width, "x", city_map.height)
    print("Objetivo (goal):", city_map.goal)
    print("Tiempo m√°ximo:", city_map.max_time)

    # Reload from cache (just to show it works)
    city_map_cached = api.load_map_from_json()
    print("\nüìÇ --- Map Reloaded from Cache ---")
    print("Ciudad:", city_map_cached.city_name)
    print("Dimensiones:", city_map_cached.width, "x", city_map_cached.height)

    # Show first few tiles
    elementos = city_map_cached.iterar_elementos()
    print("\nüîé --- First 5 Tiles ---")
    for tile in elementos[:10]:
        print(
            f"({tile.x},{tile.y}) {tile.codigo} ‚Üí {tile.name}, "
            f"peso={tile.surface_weight}, bloqueado={tile.blocked}"
        )
